services:
    reciever:
        restart: always
        deploy:
            replicas: 3
        build:
            dockerfile: Reciever/Dockerfile
        depends_on:
        - kafka
        ports:
            - '8080-8089:8080'
        volumes:
          - type: bind
            source: ./logs/reciever.log
            target: /app/reciever.log
    storage:
        restart: always
        build:
            dockerfile: Storage/Dockerfile
        depends_on:
            db:
                condition: service_healthy
            kafka:
                condition: service_started
        volumes:
          - type: bind
            source: ./logs/storage.log
            target: /app/storage.log

    processor:
        restart: always
        environment:
            CORS_ALLOW_ALL: no # Change to yes if you want to allow all requests
        build:
            dockerfile: Processor/Dockerfile
        depends_on:
        - storage
        ports:
            - '8100:8100'
        volumes:
          - ./data/processing:/app/data
          - type: bind
            source: ./logs/processor.log
            target: /app/processor.log
    analyzer:
        restart: always
        environment:
            CORS_ALLOW_ALL: no # Change to yes if you want to allow all requests
        build:
            dockerfile: Analyzer/Dockerfile
        depends_on:
        - kafka
        ports:
            - '8110:8110'
        volumes:
          - type: bind
            source: ./logs/analyzer.log
            target: /app/analyzer.log

    consistency:
        restart: always
        build:
            dockerfile: consistency_check/Dockerfile
        ports:
            - '8120:8120'
        depends_on:
            - storage
            - processor
            - analyzer
        volumes:
          - ./data/consistency:/app/data
          - type: bind
            source: ./logs/consistency.log
            target: /app/consistency.log
    anomaly:
        restart: always
        environment:
            PARTICIPANTS_MAX: 100
            WAVE_HEIGHT_MAX: 50
        build:
            dockerfile: anomaly_detector/Dockerfile
        ports:
            - '8130:8130'
        depends_on:
            - kafka
        volumes:
          - ./data/anomaly:/app/data
          - type: bind
            source: ./logs/anomaly.log
            target: /app/anomaly.log
    db:
        env_file: "db.env"    
        image: mysql
        restart: always
        healthcheck:
            test: ["CMD", "bash", "-c", "mysql --user=$$MYSQL_USER --password=$$MYSQL_PASSWORD --execute='SHOW DATABASES;'"]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 20s
        volumes:
        # Where our data will be persisted
            - ./data/db:/var/lib/mysql
    zookeeper:
        restart: always
        image: wurstmeister/zookeeper
        volumes:
        - zookeeper_data:/opt/zookeeper-3.4.13/conf/
    kafka:
        restart: always
        image: wurstmeister/kafka
        command: sh -c "rm -f /kafka/kafka-logs-kafka/meta.properties && start-kafka.sh"
        hostname: kafka
        environment:
            KAFKA_CREATE_TOPICS: "events:1:1" # topic:partition:replicas
            KAFKA_ADVERTISED_HOST_NAME: localhost # docker-machine ip
            KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
            KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
            KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://kafka:9092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        volumes:
            - ./data/kafka/:/kafka
        depends_on:
            - "zookeeper"
    
    dashboard:
        restart: always
        build:
            dockerfile: Dashboard/Dockerfile
        ports:
            - '80:80'
        depends_on:
            - reciever
            - processor
            - analyzer
volumes:
    zookeeper_data:
